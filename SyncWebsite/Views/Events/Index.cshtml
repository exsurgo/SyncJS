
<div data-update="content" data-title="Events">

    <h2>Event Types</h2>
    <p>
        There are eight types of events in the Sync framework.  These events occur at various stages of the request/response process.
        <ul>
            <li>
                <em class="b">ready</em> - The document is ready, equivalent to jQuery's <em>$(document).ready()</em> event.
            </li>
            <li>
                <em class="b">request</em> - A request was just made with the Sync framework.  This event occurs anytime an ajaxified 
                link is clicked or an ajaxified form is submitted.
            </li>
            <li>
                <em class="b">success</em> - An OK response was recieved from the server, generally returning either HTML or JSON.
            </li>
            <li>
                <em class="b">error</em> - An error response was received from the server.
            </li>
            <li>
                <em class="b">updating</em> - An HTML element is about to be updated in the DOM.  There may be multiple elements returned
                from a single response, so this event would occur each time.
            </li>        
            <li>
                <em class="b">updated</em> - An HTML element was just updated in the DOM.  
                This event occurs right after the <em>updating</em> event.
            </li>
            <li>
                <em class="b">complete</em> - The request/response/update process has been completed.
            </li>
            <li>
                <em class="b">init</em> - The HTML was just initialized after either the initial page load or an element was updated.
                Use this event to initialize any plugins or attach any events to the DOM.
            </li>
       </ul>
    </p>
    
    <hr class="line"/>

    <h2>Global Events</h2>
    <p>
        Global event handlers can be defined in the <em>Sync.Init.js</em> file, or by adding them directly to the <em>Sync.events</em> object.
    </p>
    <label>Sync.Init.js</label>
    <pre class="brush: js;">
        //Initialize
        Sync.init({
            ...

            //The document is ready
            ready: function () { ... },

            //A request is being made
            request: function (e) { ... },

            //A request was successful
            success: function (e) { ... },

            //A request resulted error
            error: function (e) { ... },

            //An element is about to be updated in the DOM
            updating: function (e) { ... },

            //An element was just updated in the DOM
            updated: function (e) { ... },

            //The result was successful and all updates have been made
            complete: function (e) { ... },

            //Initialize HTML after page load or elements update
            init: function (e) { ... }

        });
    </pre>

    <hr class="line"/>

    <h2>Event Object (e)</h2>
    <p>
        Every event passes a single event object that hold all parameters for the current request.
    </p>
    <p>
        <ul>
            <li><em>sender</em> - Object that initiated the request, usually a link or a form.</li>
            <li><em>url</em> - URL for the current request... can be changed during <em>request</em> event.</li>
            <li><em>metadata</em> - All metadata associated with the request.  <a href="/Metadata">Read More...</a></li>
            <li><em>routeData</em> - Metadata defined by one or multiple routes.</li>
            <li><em>senderData</em> - Metadata defined on sender.</li>
            <li><em>updateData</em> - Metadata defined on an element to be updated.</li>
            <li><em>element</em> - Element that is being updated in the DOM.</li>
            <li><em>isPost</em> - Indicates that the request is a post.</li>
            <li><em>postData</em> - Form data that is being posted.</li>
            <li><em>result</em> - Body of the response, usually HTML or a JSON object.</li>
        </ul>
    </p>


</div>