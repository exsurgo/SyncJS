
<div data-update="content" data-title="Dependencies">
  
    <p>
        Sync JS also allows you to dynamically load and execute dependent scripts as needed.  Only load what's needed, when needed.  
        You can associate scripts with HTML content, and also execute callbacks when the content is loaded.
    </p>
    <hr />
    <hr />

    <!--Inline Script-->
    <h2>Inline Scripts</h2>
    <hr />
    <label>Server Response</label>
    <pre class="brush: xml;">
        <script-temp>alert("The request returned a script tag which was executed.")</script-temp>
    </pre>
    <p>
        <a href="/Scripts/InlineScript">Make request with inline script</a>
    </p>
    
    <hr class="line"/>

    <!--Script Loading-->
    <h2>On-Demand Script Loading</h2>
    <p>
        Scripts can be associated with HTML elements via the <em>data-load="{script}"</em> attribute. When the element is updated in the page,
        the associated script is lazy-loaded.  You can load multiple scripts separated by commas: <em>data-load="{script1}, {script2}"</em>
    </p>
    <p>
        Note that the script location can be set via <em>config.scriptPath</em> so that all scripts are requested from the same location.   
        So instead of "/Content/Scripts/Dependency1.js", you can just set the value of scriptPath to "/Content/Scripts/" in the config, 
        and use "Dependency1.js" for the attribute value.
    </p>
    <hr />
    <label>Server Response</label>
    <pre class="brush: xml;">
        <div id="div-with-load" data-update="replace" data-load-temp="Dependency.js">
            This div was just loaded and a dependent script was run.
        </div>

        <!-- Inline script ran after dependency is loaded -->
        <script-temp>
            dependentFunction();
        </script-temp>    
    </pre>
    <p>
        <a href="/Scripts/Load">Update with dependency</a>
    </p>
    <br />
    <div id="div-with-load" class="orange-div">
        This div should be replaced.  Dependent scripts should be loaded via a data attribute.
    </div>

    <hr class="line"/>

    <!--Callbacks-->
    <h2>Callbacks</h2>
    <p>
        Once an update occurs, a callback can also be executed via the <em>data-callback</em> attribute.  
        The call back can be a global function or namespaced.  Also note that the context (<em>this</em> keyword) is
        a jQuery object representing the HTML update.
    </p>
    <label>Server Response</label>
    <pre class="brush: xml;">
        <div id="callback-div" data-update="replace" data-load-temp="Callback.js" data-callback-temp="CallbackController.init">
            This div was just loaded and a callback was ran.  
        </div>
    </pre>
    <label>Lazy-Loaded Script File - Callback.js</label>
    <pre class="brush: js;">
        var CallbackController = {
    
            //Callback function
            init: function () {
                alert("The dependency Callback.js was loaded and the function 'init' has been run.");
                //The 'this' keyword refers to the updates jquery object
                this.append("<b>This element was added by the callback.</b>");
            }

        }
    </pre>
    <p>
        <a href="/Scripts/Callback">Make Request with callback</a>
    </p>
    <div id="callback-div" class="orange-div">
        This div should be replaced and then a callback is run
    </div>

    <hr class="line"/>

    <!--Sender Callbacks-->    
    <h2>Sender Callbacks</h2>
    <p>
        Callbacks can be defined on the sender also. The sender is  the link, form, or other ajaxified element that
        initiates the request.
    </p>
    <p>
        In the example below, when the form is submitted, the data is posted to the server and a JSON response is returned.
        When the response is received, the function <em>Todos.saved</em> is run as indicated by the attribute <em>data-success</em>.
        It's important to note that the arguments passed to a success event or always the same.
        <ul>
            <li><em>result</em> - The resulting HTML or JSON object response.</li>
            <li><em>metadata</em> - The metadata from the route and sender.</li>
            <li><em>sender</em> - The link, form or other element that initiated the request.</li>
        </ul>
    </p>
    <hr/>
    <label>HTML Form</label>
    <pre class="brush: xml;">
        <ul id="todo-list"></ul>

        <form method="post" action="/Todos/Save" data-load-temp="Todos.js" data-success="Todos.saved">
            <input type="text" name="Title"/>
            <button type="submit">Save</button>
        </form>
    </pre>
    <label>JSON Response</label>
    <pre class="brush: js;">
        {"Succeeded":true}
    </pre>
    <label>Todo.js</label>
    <pre class="brush: js;">
        var Todos = {

            saved: function (result, metadata, sender) {
                if (result.Succeeded) {
                    alert("Todo was saved!", "success");
                    var textbox = sender.find("[name=Title]");
                    var list = $("#todo-list");
                    list.append("<li>" + textbox.val() + "</li>");
                    textbox.val("");
                }
            }

        };
    </pre>
    
    <div class="orange-div">
        <ul id="todo-list"></ul>
    </div>
    <form method="post" action="/Todos/Save" class="box col7" data-success="Todos.saved">
        <input type="text" name="Title" value="First Todo" data-focus="false"/>
        <button type="submit">Save</button>
    </form>

</div>
